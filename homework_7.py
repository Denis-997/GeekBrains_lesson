# 1). Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init__()),
# который должен принимать данные (список списков) для формирования матрицы.
# Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
# Примеры матриц вы найдете в методичке.
# Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
# Далее реализовать перегрузку метода __add__() для реализации операции сложения двух объектов
# класса Matrix (двух матриц). Результатом сложения должна быть новая матрица.
# Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки
# первой матрицы складываем с первым элементом первой строки второй матрицы и т.д.

class Matrix:
    def __init__(self, lst):
        self.lst = lst

    def __str__(self):
        return '\n'.join('\t'.join(map(str, row)) for row in self.lst)

    def __add__(self, other):
        new_list = []
        lst_2 = []
        for i in range(len(self.lst)):
            for j in range(len(self.lst[i])):
                new_list.append(other.lst[i][j] + self.lst[i][j])
                if len(new_list) == len(self.lst[i]):
                    lst_2.append(new_list)
                    new_list = []
        return '\n'.join('\t'.join(map(str, row)) for row in lst_2)


m_1 = Matrix([[1, 2, 3, 4], [5, 4, 7, 3], [8, 9, 7, 3]])
m_2 = Matrix([[2, 2, 2, 2], [3, 3, 3, 2], [1, 1, 1, 2]])
print(m_1,'\n')
print(m_2,'\n')
print(m_1 + m_2)

# 2). Реализовать проект расчета суммарного расхода ткани на производство одежды.
# Основная сущность (класс) этого проекта — одежда, которая может иметь определенное название.
# К типам одежды в этом проекте относятся пальто и костюм.
# У этих типов одежды существуют параметры: размер (для пальто) и рост (для костюма).
# Это могут быть обычные числа: V и H, соответственно.
# Для определения расхода ткани по каждому типу одежды использовать
# формулы: для пальто (V/6.5 + 0.5), для костюма (2 * H + 0.3).
# Проверить работу этих методов на реальных данных.
# Реализовать общий подсчет расхода ткани.
# Проверить на практике полученные на этом уроке знания:
# реализовать абстрактные классы для основных классов проекта, проверить на практике работу декоратора @property.
class Coat:
    def square_coat(self, width):
        return round(width / 6.5 + 0.5)

class Suit:
    def square_suit(self, height):
        return round(2 * height + 0.3)

class Textile:
    def __init__(self, name):
        self.name = name
        self.co = []
        self.su = []

    def add_square_coat(self, width):
        self.g_1 = Coat().square_coat(width)
        return self.co.append(self.g_1)

    def add_square_suit(self, height):
        self.g_2 = Suit().square_suit(height)
        return self.su.append(self.g_2)

    def total_square_coat(self):
        self.total_1 = 0
        for el in self.co:
            self.total_1 += el
        return f'общая площадь ткани пальто {int(self.total_1)} м.п.'

    def total_square_suit(self):
        self.total_2 = 0
        for el in self.su:
            self.total_2 += el
        return f'общая площадь ткани костюма {self.total_2} м.п.'

    @property
    def total_square_textile(self):
        return f'общая площадь ткани {self.total_1 + self.total_2} м.п.'

t = Textile('Ткань')
t.add_square_coat(56)
t.add_square_suit(4)
print(t.total_square_coat())
print(t.total_square_suit())
print(t.total_square_textile, '\n')

# 3). Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()),
# вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).Данные методы должны применяться
# только к клеткам и выполнять увеличение, уменьшение, умножение и обычное (не целочисленное) деление клеток,
# соответственно. В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше
# нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих
# двух клеток.
# Деление. Создается общая клетка из двух.
# Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.


# Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
class Cell:
    def __init__(self, count_cell=int):
        self.count_cell = count_cell

    # В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()),
    # вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
    def __add__(self, other):
        return Cell(self.count_cell + other.count_cell)

    def __sub__(self, other):
        if (int(self.count_cell - other.count_cell)) >= 0:
            return Cell(self.count_cell - other.count_cell)
        else:
            return f'операция не выполнится'


    def __mul__(self, other):
        return Cell(self.count_cell * other.count_cell)

    def __truediv__(self, other):
        if other.count_cell == 0:
            return f'на 0 делить нельзя'
        else:
            return Cell(round(self.count_cell / other.count_cell))

    def __str__(self):
        return str(self.count_cell)

    # В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
    # Данный метод позволяет организовать ячейки по рядам.
    # Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
    # Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
    # Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
    # Тогда метод make_order() вернет строку: *****\n*****\n**.
    # Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
    # Тогда метод make_order() вернет строку: *****\n*****\n*****.

    def make_order(self, cells_in_row):
        row = ''
        for i in range(int(self.count_cell / cells_in_row)):
            row += f'{"*" * cells_in_row}'
            if (i + 1) < (self.count_cell / cells_in_row):
                row += f'\\n'
        row += f'{"*" * (self.count_cell % cells_in_row)}'
        return row


c = Cell(20)
c_2 = Cell(10)
print(c + c_2)
print(c * c_2)
print(c - c_2)
print(c / c_2)
print(c.make_order(5))
print(c_2.make_order(6))
